{"version":3,"sources":["../../src/pages/reset-password/reset-password.module.ts","../../src/validators/email.ts","../../src/pages/reset-password/reset-password.ts"],"names":[],"mappings":"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","file":"2.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ResetPasswordPage } from './reset-password';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ResetPasswordPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ResetPasswordPage),\r\n  ],\r\n  exports: [\r\n    ResetPasswordPage\r\n  ]\r\n})\r\nexport class ResetPasswordPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { FormControl } from '@angular/forms';\r\n\r\nexport class EmailValidator {\r\n  \r\n  static isValid(control: FormControl){\r\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/.test(control.value);\r\n    \r\n    if (re){\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      \"invalidEmail\": true\r\n    };\r\n    \r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, AlertController } from 'ionic-angular';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { AuthProvider } from '../../providers/auth/auth';\r\nimport { EmailValidator } from '../../validators/email';\r\n\r\n\r\n@IonicPage({\r\n  name: 'reset-password'\r\n})\r\n@Component({\r\n  selector: 'page-reset-password',\r\n  templateUrl: 'reset-password.html',\r\n})\r\nexport class ResetPasswordPage {\r\n  public resetPasswordForm: FormGroup;\r\n  \r\n  constructor(public navCtrl: NavController, public authProvider: AuthProvider, \r\n    public formBuilder: FormBuilder, public alertCtrl: AlertController) {\r\n      \r\n      this.resetPasswordForm = formBuilder.group({\r\n        email: ['', Validators.compose([Validators.required, EmailValidator.isValid])],\r\n      });\r\n  }\r\n\r\n  resetPassword(){\r\n    if (!this.resetPasswordForm.valid){\r\n      console.log(this.resetPasswordForm.value);\r\n    } else {\r\n      this.authProvider.resetPassword(this.resetPasswordForm.value.email)\r\n      .then((user) => {\r\n        let alert = this.alertCtrl.create({\r\n          message: \"We just sent you a reset link to your email\",\r\n          buttons: [\r\n            {\r\n              text: \"Ok\",\r\n              role: 'cancel',\r\n              handler: () => { this.navCtrl.pop(); }\r\n            }\r\n          ]\r\n        });\r\n        alert.present();\r\n\r\n      }, (error) => {\r\n        var errorMessage: string = error.message;\r\n        let errorAlert = this.alertCtrl.create({\r\n          message: errorMessage,\r\n          buttons: [{ text: \"Ok\", role: 'cancel' }]\r\n        });\r\n        errorAlert.present();\r\n      });\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts"],"sourceRoot":""}